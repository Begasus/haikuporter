#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright 2016-2025 Haiku, Inc. All rights reserved.
# Distributed under the terms of the MIT License.
#
# Authors:
#   Alexander von Gluck IV <kallisti5@unixzen.com>
#

import base64
import os
import sys
import tempfile
import json
import argparse
from subprocess import call

class color:
	HEADER = '\033[95m'
	OKBLUE = '\033[94m'
	OKGREEN = '\033[92m'
	WARNING = '\033[93m'
	FAIL = '\033[91m'
	ENDC = '\033[0m'
	BOLD = '\033[1m'
	UNDERLINE = '\033[4m'

def launch_ssh(arguments):
	config_file = os.path.join(args.confdir, arguments.buildername + ".json")

	try:
		json_data = open(config_file)
		data = json.load(json_data)

		hostKeysFile = os.path.join(args.confdir, "known_hosts")

		jumpKeyFile = None
		keyFile = None

		cmd = []
		if 'jump' in data['ssh']:
			# TODO: Can't easily specify a jumphost identity via the CLI to ssh,
			#       implement this later
			print(color.WARNING + "Jumphosts not yet supported!" + color.ENDC)
			sys.exit()
			jumpKeyFile = tempfile.NamedTemporaryFile()
			jumpKeyFile.write(base64.b64decode(data['ssh']['jump']['privateKey']).decode("ascii"))
			jumpKeyFile.flush()
			jumpUser = data['ssh']['jump']['user']
			jumpHost = data['ssh']['jump']['host']
			jumpPort = data['ssh']['jump']['port']

		keyFile = tempfile.NamedTemporaryFile()
		keyFile.write(base64.b64decode(data['ssh']['privateKey']))
		keyFile.flush()
		user = data["ssh"]["user"]
		host = data["ssh"]["host"]
		port = data["ssh"]["port"]
		cmd = ["ssh","-i",keyFile.name,"-o","UserKnownHostsFile="+hostKeysFile,"-p",port,user+"@"+host]

		print(color.OKGREEN + "Connecting to builder " + user + "@" + host + ":" + port + color.ENDC)
		#print(' '.join(cmd))
		call(cmd)

	except Exception as e:
		print(color.FAIL + "Error connecting to " + arguments.buildername + ":" + str(e) + color.ENDC)
		parser.print_help()

parser = argparse.ArgumentParser(description='Open SSH connection to builder')
parser.add_argument('-C', '--confdir', help='Builder config directory on local machine', required=False, default=os.path.join(os.getcwd(), "buildmaster/builders"))
parser.add_argument('buildername', help='Name of builder')
args = parser.parse_args()

if not os.path.isdir(args.confdir):
	print("Error: Builder inventory not found!");
	print("Please change to haikuports directory before running this tool (or pass --confdir)!")
	sys.exit()

launch_ssh(args)
